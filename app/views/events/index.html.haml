:javascript
  $(function() {
    $(".detail").hide();

    $("#event-table").on('click', function(e) {
      if ($(e.target).is('a')) return;
      if (($row = $(e.target).parents("tr.event")).length) {
        var id = $row.attr('id').split('-');
        $("#event-details-" + id[id.length - 1]).toggle();
      }
    });

    $(".ninja-box").hide();

    $(".ninja").on('click', function(e) {
      if (Math.random() < 0.08) {
        e.preventDefault();
        $(window).scrollTop(0);

        $(".ninja-box").show();
        $(".ninja-animation").prepend("<img src='#{image_path 'ninja.gif'}?"+Math.random()+"' style='float:right' />");
        $(".ninja-animation").animate({ left: 0 }, 4000, function() {
          $(".ninja-box").fadeOut(500, function() {
            window.location = e.target.href;
          });
          $(".ninja-animation").html('');
        });
      }
    });
  });
:css
  h2 select {
    font-size: 18px;
  }
  #event-table, #event-table tr {
    border: 0px;
  }
  #event-table a {
    color: #111;
  }
  #event-table .title {
    font-size: 14px;
  }
  #event-table .organization {
    font-size: 10px;
  }
  #event-table .canceled {
    color: #f00;
  }
  #event-table .error {
    font-size: 12px;
    color: #f00;
  }
  .reclaim-field {
    width: 30px;
    margin-right: 5px;
  }
  .ninja-box {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.8);
    z-index: 3;
  }
  .ninja-animation {
    height: 150px;
    background-color: #33333D;
    position: absolute;
    top: 30%;
    left: -100%;
    width: 100%;
  }
.ninja-box
  .ninja-animation
%h2
  Filter Events:
  =select_tag :state, options_for_select([['All Events', ''], ['Todo Events', 'todo']] + Event.all_states.map{|s| [Event.state_descriptions[s], s]}, params[:state]), :onchange => "javascript:window.location=\"#{events_path}/\"+this.value;"
-if params[:state] == 'todo' && @num_to_reclaim > 0
  %h3
    Also:
    =link_to event_state_path(:disbursement_done) do
      #{@num_to_reclaim} events to reclaim funding from!

%table#event-table
  %thead
    %th Title
    %th{ :width => '200'} Organization
  %tbody
    -@events_by_state = Hash.new([]).merge(@events.group_by { |e| e.state_name })
    -@events_by_state.each do |s, event_list|
      %tr
        %th{ :colspan => 4 }= Event.state_descriptions[s]
      - event_list.each do |e|
        %tr.event{ :id => "event-#{e.id}" }
          %td.title
            %b
              -if e.canceled
                %span.canceled CANCELED
              = e.title
            -if e.error.present?
              .error= e.error
            -if e.organization
              .organization
                by
                =link_to e.organization.name, e.organization.collegiatelink_url
          %td
            - if e.desired_state != e.state_name && e.state_name != :error
              =link_to 'Update', update_state_event_path(e), :class => 'btn'
              =link_to 'Ninja', update_state_event_path(e, :ninja => 'true'), :class => 'btn ninja'
            - elsif e.state_name == :disbursement_done || e.state_name == :error
              =link_to 'Reclaim', reclaim_funds_event_url(e), :class => 'btn'
              =link_to 'Cancel', cancel_event_url(e), :class => 'btn'
        %tr.detail{ :id => "event-details-#{e.id}" }
          %td
            %b Event ID:
            =e.collegiatelink_id
            %br
            %b Starts:
            =e.to_s(:starts)
            %br
            %b Ends:
            =e.to_s(:ends)
            %br
            %b State:
            =e.to_s(:state)
            %br
            %b Desired State:
            =e.to_s(:desired_state)
          %td{ :id => "exec-board-#{e.organization_id}" }
            -if e.organization
              =render 'exec_list', :organization => e.organization
